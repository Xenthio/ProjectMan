#!/usr/bin/env python3
import sys
import json
import os
from pathlib import Path
versionNumber = """Project Manager. Version: 0002_a, (GNU GPLv3 License)
Written by Xenthio
"""
developerMode = True

Error = "\033[1;31mError\033[1;37m: "
Dev = "\033[1;32mDev\033[1;37m: "
Changing = "Changing into \'%s\'..."
NotFound = Error + "\'%s\' not found in projects root.\nCheck if it exists or the config (~/.projectcfg) is setup correctly."
FirstTime = "This is your first time using Project,\nplease specify a directory to use as a project root...\n(e.g. /home/xen/projects/)"
PreferedShell = "Please specify your prefered shell. (e.g. /bin/bash)"
FirstPromptDir = "Directory: "
FirstPromptShell = "Path: "
SetupNotFound = Error + "Cannot open \'%s\', the specified directory is invalid."
Help = """project [-cdDghv] [project]

Usage:
  project [-g|--goto] <project>
  project -l | --list
  project -h | --help
  project -v | --version

Options:
  -h --help         Show this screen.
  -v --version      Show version.
  -g --goto         Default: Goto project folder.
  -c --create       Create project file.
  -d --delete       Delete project file.
  -D --deleteAll    Delete entire project folder.
  -l --list         List all projects.
"""
ConfigFile = str(Path.home()) + "/.projectcfg"

if os.path.exists(ConfigFile) != True:
	file1 = open(ConfigFile,"w")
	file1.write("{\n")
	file1.write("\"ProjectsRoot\": \"")
	print(FirstTime)
	Prompt = True
	while Prompt == True:
		x = input(FirstPromptDir)
		if os.path.exists(x) != True:
			print(SetupNotFound % x)
		else:
			Prompt = False
	file1.write(x)
	file1.write("\"\n")
	file1.write("}\n")
	file1.close()
	exit()


def help():

	print(Help)

def version():
	print(versionNumber)
def notImplemented():
	print("not implemented yet")


def changeDir(arg):
	path = "error"
	if sys.platform == "darwin":
		path = arg.replace(" ", "\\ ")
	elif sys.platform == "linux":
		path = "\"" + arg + "\""
	elif sys.platform == "win32":
		path = "\"" + arg + "\""
	#os.chdir(path)
	os.system('cd ' + path)
	print(path)

with open(ConfigFile, 'r') as config:
    data=config.read()

settings = json.loads(data)
ProjectsRoot = settings['ProjectsRoot']

def listprojects():
	print(" ")
	Dirs = os.listdir(ProjectsRoot)
	for i in Dirs:
		x = ProjectsRoot + i
		#print(x + "/projectfile")
		try:
			with open(x + "/projectfile", 'r') as checkPass2:
				data3=checkPass2.read()
			projectfile2 = json.loads(data3)
			print(projectfile2['FolderName'], end=" ----- (aka ")
			for i in projectfile2['Aliases']:
				print(i, end =", ")
			print(")")
		except OSError as e:
			#print(e)
			pass
	print(" ")
def goto(projecc):
	Dirs = os.listdir(ProjectsRoot)
	found = 0
	for i in Dirs:
		x = ProjectsRoot + i
		#print(x + "/projectfile")
		try:
			with open(x + "/projectfile", 'r') as checkPass:
				data2=checkPass.read()
			projectfile = json.loads(data2)
			if projecc.upper() in map(str.upper,projectfile['Aliases']):
				print(Changing % projectfile['FolderName'])
				os.chdir(ProjectsRoot + projectfile['FolderName'])
				if developerMode:
					print(Dev + ProjectsRoot + projectfile['FolderName'])
				os.system(os.environ['SHELL'])
				found = 1
		except:
			pass
	if found == 0:
		print(NotFound % projecc)

if len(sys.argv) == 1:
	help() #no command
elif sys.argv[1] in ("-g", "--goto"):
	goto(sys.argv[2])
elif sys.argv[1] in ("-h", "--help"):
	help()
elif sys.argv[1] in ("-v", "--version"):
	version()
elif sys.argv[1] in ("-c", "--create"):
	notImplemented()
elif sys.argv[1] in ("-d", "--delete"):
	notImplemented()
elif sys.argv[1] in ("-D", "--deleteAll"):
	notImplemented()
elif sys.argv[1] in ("-l", "--list"):
	listprojects()
else:
	goto(sys.argv[1])
